//! @version @js-joda/timezone - 2.21.1
//! @copyright (c) 2015-present, Philipp Thürwächter, Pattrick Hüper & js-joda contributors
//! @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos
//! @license BSD-3-Clause (see LICENSE in the root directory of this source tree)

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@js-joda/core')) :
  typeof define === 'function' && define.amd ? define(['@js-joda/core'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.JSJoda));
})(this, (function (core) { 'use strict';

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (it) return (it = it.call(o)).next.bind(it);
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var MomentZoneRules = function (_ZoneRules) {
    _inheritsLoose(MomentZoneRules, _ZoneRules);
    function MomentZoneRules(tzdbInfo) {
      var _this;
      _this = _ZoneRules.call(this) || this;
      _this._tzdbInfo = tzdbInfo;
      _this._ldtUntils = new LDTUntils(_this._tzdbInfo.untils, _this._tzdbInfo.offsets);
      return _this;
    }
    var _proto = MomentZoneRules.prototype;
    _proto.isFixedOffset = function isFixedOffset() {
      return this._tzdbInfo.offsets.length === 1;
    };
    _proto.offsetOfInstant = function offsetOfInstant(instant) {
      var epochMilli = instant.toEpochMilli();
      return this.offsetOfEpochMilli(epochMilli);
    };
    _proto.offsetOfEpochMilli = function offsetOfEpochMilli(epochMilli) {
      var index = binarySearch(this._tzdbInfo.untils, epochMilli);
      return core.ZoneOffset.ofTotalSeconds(this._offsetByIndexInSeconds(index));
    };
    _proto.offsetOfLocalDateTime = function offsetOfLocalDateTime(localDateTime) {
      var info = this._offsetInfo(localDateTime);
      if (info instanceof core.ZoneOffsetTransition) {
        return info.offsetBefore();
      }
      return info;
    };
    _proto._offsetInfo = function _offsetInfo(localDateTime) {
      var index = ldtBinarySearch(this._ldtUntils, localDateTime);
      var offsetIndex = index >> 1;
      if (index % 2 === 1) {
        var ldtBefore = this._ldtUntils.get(Math.max(index - 1, 0));
        var ldtAfter = this._ldtUntils.get(Math.min(index, this._ldtUntils.size - 1));
        var offsetBefore = core.ZoneOffset.ofTotalSeconds(this._offsetByIndexInSeconds(offsetIndex));
        var offsetAfter = core.ZoneOffset.ofTotalSeconds(this._offsetByIndexInSeconds(Math.min(offsetIndex + 1, this._tzdbInfo.offsets.length - 1)));
        if (offsetBefore.compareTo(offsetAfter) > 0) {
          return core.ZoneOffsetTransition.of(ldtBefore, offsetBefore, offsetAfter);
        } else {
          return core.ZoneOffsetTransition.of(ldtAfter, offsetBefore, offsetAfter);
        }
      }
      return core.ZoneOffset.ofTotalSeconds(this._offsetByIndexInSeconds(offsetIndex));
    };
    _proto._offsetByIndexInSeconds = function _offsetByIndexInSeconds(index) {
      return -offsetInSeconds(this._tzdbInfo.offsets[index]);
    };
    _proto.validOffsets = function validOffsets(localDateTime) {
      var info = this._offsetInfo(localDateTime);
      if (info instanceof core.ZoneOffsetTransition) {
        return info.validOffsets();
      }
      return [info];
    };
    _proto.transition = function transition(localDateTime) {
      var info = this._offsetInfo(localDateTime);
      if (info instanceof core.ZoneOffsetTransition) {
        return info;
      }
      return null;
    };
    _proto.standardOffset = function standardOffset(instant) {
      notSupported('ZoneRules.standardOffset');
    };
    _proto.daylightSavings = function daylightSavings(instant) {
      notSupported('ZoneRules.daylightSavings');
    };
    _proto.isDaylightSavings = function isDaylightSavings(instant) {
      notSupported('ZoneRules.isDaylightSavings');
    };
    _proto.isValidOffset = function isValidOffset(localDateTime, offset) {
      return this.validOffsets(localDateTime).some(function (o) {
        return o.equals(offset);
      });
    };
    _proto.nextTransition = function nextTransition(instant) {
      notSupported('ZoneRules.nextTransition');
    };
    _proto.previousTransition = function previousTransition(instant) {
      notSupported('ZoneRules.previousTransition');
    };
    _proto.transitions = function transitions() {
      notSupported('ZoneRules.transitions');
    };
    _proto.transitionRules = function transitionRules() {
      notSupported('ZoneRules.transitionRules');
    };
    _proto.equals = function equals(other) {
      if (this === other) {
        return true;
      }
      if (other instanceof MomentZoneRules) {
        return this._tzdbInfo === other._tzdbInfo;
      }
      return false;
    };
    _proto.toString = function toString() {
      return this._tzdbInfo.name;
    };
    return MomentZoneRules;
  }(core.ZoneRules);
  var LDTUntils = function () {
    function LDTUntils(_tzdbUntils, tzdbOffsets) {
      this._tzdbUntils = _tzdbUntils;
      this._tzdbOffsets = tzdbOffsets;
      this._ldtUntils = [];
      this.size = this._tzdbUntils.length * 2;
    }
    var _proto2 = LDTUntils.prototype;
    _proto2._generateTupple = function _generateTupple(index) {
      var epochMillis = this._tzdbUntils[index];
      if (epochMillis === Infinity) {
        return [core.LocalDateTime.MAX, core.LocalDateTime.MAX];
      }
      var instant = core.Instant.ofEpochMilli(epochMillis);
      var offset1 = offsetInSeconds(this._tzdbOffsets[index]);
      var zone1 = core.ZoneOffset.ofTotalSeconds(-offset1);
      var ldt1 = core.LocalDateTime.ofInstant(instant, zone1);
      var nextIndex = Math.min(index + 1, this._tzdbOffsets.length - 1);
      var offset2 = offsetInSeconds(this._tzdbOffsets[nextIndex]);
      var zone2 = core.ZoneOffset.ofTotalSeconds(-offset2);
      var ldt2 = core.LocalDateTime.ofInstant(instant, zone2);
      if (offset1 > offset2) {
        return [ldt1, ldt2];
      } else {
        return [ldt2, ldt1];
      }
    };
    _proto2._getTupple = function _getTupple(index) {
      if (this._ldtUntils[index] == null) {
        this._ldtUntils[index] = this._generateTupple(index);
      }
      return this._ldtUntils[index];
    };
    _proto2.get = function get(index) {
      var ldtTupple = this._getTupple(index >> 1);
      return ldtTupple[index % 2];
    };
    return LDTUntils;
  }();
  function ldtBinarySearch(array, value) {
    var hi = array.size - 1,
      lo = -1,
      mid;
    while (hi - lo > 1) {
      if (!value.isBefore(array.get(mid = hi + lo >> 1))) {
        lo = mid;
      } else {
        hi = mid;
      }
    }
    return hi;
  }
  function offsetInSeconds(tzdbOffset) {
    return roundDown(+tzdbOffset * 60);
  }
  function roundDown(r) {
    if (r < 0) {
      return Math.ceil(r);
    } else {
      return Math.floor(r);
    }
  }
  function binarySearch(array, value) {
    var hi = array.length - 1,
      lo = -1,
      mid;
    while (hi - lo > 1) {
      if (array[mid = hi + lo >> 1] <= value) {
        lo = mid;
      } else {
        hi = mid;
      }
    }
    return hi;
  }
  function notSupported(msg) {
    throw new Error("not supported: " + msg);
  }

  function charCodeToInt(charCode) {
    if (charCode > 96) {
      return charCode - 87;
    } else if (charCode > 64) {
      return charCode - 29;
    }
    return charCode - 48;
  }
  function unpackBase60(string) {
    var i = 0,
      parts = string.split('.'),
      whole = parts[0],
      fractional = parts[1] || '',
      multiplier = 1,
      num,
      out = 0,
      sign = 1;
    if (string.charCodeAt(0) === 45) {
      i = 1;
      sign = -1;
    }
    for (i; i < whole.length; i++) {
      num = charCodeToInt(whole.charCodeAt(i));
      out = 60 * out + num;
    }
    for (i = 0; i < fractional.length; i++) {
      multiplier = multiplier / 60;
      num = charCodeToInt(fractional.charCodeAt(i));
      out += num * multiplier;
    }
    return out * sign;
  }
  function arrayToInt(array) {
    for (var i = 0; i < array.length; i++) {
      array[i] = unpackBase60(array[i]);
    }
  }
  function intToUntil(array, length) {
    for (var i = 0; i < length; i++) {
      array[i] = Math.round((array[i - 1] || 0) + array[i] * 60000);
    }
    array[length - 1] = Infinity;
  }
  function mapIndices(source, indices) {
    var out = [],
      i;
    for (i = 0; i < indices.length; i++) {
      out[i] = source[indices[i]];
    }
    return out;
  }
  function unpack(string) {
    var data = string.split('|'),
      offsets = data[2].split(' '),
      indices = data[3].split(''),
      untils = data[4].split(' ');
    arrayToInt(offsets);
    arrayToInt(indices);
    arrayToInt(untils);
    intToUntil(untils, indices.length);
    return {
      name: data[0],
      abbrs: mapIndices(data[1].split(' '), indices),
      offsets: mapIndices(offsets, indices),
      untils: untils,
      population: data[5] | 0
    };
  }

  var TZDB_DATA;
  var TZDB_VERSION;
  var AVAILABLE_ZONE_IDS = [];
  var zones = {};
  var links = {};
  var MomentZoneRulesProvider = function (_ZoneRulesProvider) {
    _inheritsLoose(MomentZoneRulesProvider, _ZoneRulesProvider);
    function MomentZoneRulesProvider() {
      return _ZoneRulesProvider.apply(this, arguments) || this;
    }
    MomentZoneRulesProvider.getRules = function getRules(zoneId) {
      var tzdbZoneInfo = zones[links[zoneId]];
      if (tzdbZoneInfo == null) {
        throw new core.DateTimeException("Unknown time-zone ID: " + zoneId);
      }
      return new MomentZoneRules(tzdbZoneInfo);
    };
    MomentZoneRulesProvider.getAvailableZoneIds = function getAvailableZoneIds() {
      return AVAILABLE_ZONE_IDS;
    };
    MomentZoneRulesProvider.getVersion = function getVersion() {
      return TZDB_VERSION;
    };
    MomentZoneRulesProvider.getTzdbData = function getTzdbData() {
      return TZDB_DATA;
    };
    MomentZoneRulesProvider.loadTzdbData = function loadTzdbData(packedJson) {
      TZDB_DATA = packedJson;
      TZDB_VERSION = packedJson.version;
      for (var _iterator = _createForOfIteratorHelperLoose(packedJson.zones), _step; !(_step = _iterator()).done;) {
        var packedZoneInfo = _step.value;
        var tzdbZoneInfo = unpack(packedZoneInfo);
        AVAILABLE_ZONE_IDS.push(tzdbZoneInfo.name);
        zones[tzdbZoneInfo.name] = tzdbZoneInfo;
        links[tzdbZoneInfo.name] = tzdbZoneInfo.name;
      }
      for (var _iterator2 = _createForOfIteratorHelperLoose(packedJson.links), _step2; !(_step2 = _iterator2()).done;) {
        var packedLink = _step2.value;
        var link = packedLink.split('|');
        AVAILABLE_ZONE_IDS.push(link[1]);
        links[link[1]] = link[0];
      }
    };
    return MomentZoneRulesProvider;
  }(core.ZoneRulesProvider);

  function getResolvedZoneId(ZoneId) {
    try {
      var resolvedTimeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;
      return ZoneId.of(resolvedTimeZone);
    } catch (err) {}
    return null;
  }
  function extendSystemDefaultZoneId(ZoneId) {
    var resolvedZoneId = getResolvedZoneId(ZoneId);
    if (resolvedZoneId == null) {
      return;
    }
    ZoneId.systemDefault = function () {
      return resolvedZoneId;
    };
  }

  /*
   * @copyright (c) 2016-present, Philipp Thürwächter, Pattrick Hüper
   * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)
   */
  function plug (jsJoda) {
    jsJoda.ZoneRulesProvider.getRules = MomentZoneRulesProvider.getRules;
    jsJoda.ZoneRulesProvider.getAvailableZoneIds = MomentZoneRulesProvider.getAvailableZoneIds;
    jsJoda.ZoneRulesProvider.getTzdbData = MomentZoneRulesProvider.getTzdbData;
    jsJoda.ZoneRulesProvider.loadTzdbData = MomentZoneRulesProvider.loadTzdbData;
    extendSystemDefaultZoneId(jsJoda.ZoneId);
    return jsJoda;
  }

  /*
   * @copyright (c) 2016-present, Philipp Thürwächter, Pattrick Hüper
   * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)
   */
  function autoPlug() {
    core.use(plug);
  }

  /*
   * @copyright (c) 2016-present, Philipp Thürwächter, Pattrick Hüper
   * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)
   */
  autoPlug();

}));
//# sourceMappingURL=js-joda-timezone-empty.js.map
